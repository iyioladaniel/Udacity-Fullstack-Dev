SQLAlchemy specifies __init__ when you instantiate a class and define the attributes.

-To read your flask app in your interactive python, you need to rename your 
flask app to be in neat format (Camel case).

To add new record using python3 interactive
person = Person(name='Amy')
db.session.add(person)
db.session.commit()

#create db in psql
createdb dbname

SQLAlchemy datatypes
https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/

SQLAlchemy Constraints
https://docs.sqlalchemy.org/en/latest/core/constraints.html

Bulk insert
https://github.com/crazyguitar/pysheeet/blob/master/docs/notes/python-sqlalchemy.rst#fastest-bulk-insert-in-postgresql-via-copy-statement


Transient >> Pending >> Flushing >> commit

Pending objects >> session flush >> session commit

Flask-Migrate works llike git for databases i.e. version control
Flask-Migrate manages migrations. Flask-Script lets us run them. 
We need Flask-Script in order to apply the migrations that we define using Flask-Migrate.

Flask-Migrate documentation
https://flask-migrate.readthedocs.io/en/latest/

Alembic documentation
https://alembic.sqlalchemy.org/en/latest/

Command to initiate Migrations
flask db init

-Detects changes to be made and creates migration file with upgrade & downgrade logic
flask db migrate
flask db upgrade
flask db downgrade

CRUD in SQLAlchemy
Create -> INSERT -> db.session.add(user1)
Read -> SELECT -> User.query.all()
Update -> UPDATE -> user1.foo = 'new value'
Delete -> DELETE -> db.session.delete(user1)

MVC
Models: manage data and business logic
View: data representation & view logic
Controller: Contro logic, notifying model & views

- Getting user data in Flask
URL query parameters using request.args.get('field','default')
Form inputs using request.form.get() (also accepts a default) or request.form[]
data type (ie. application/json) use request.data
    data_string = request.data
    data_dictionary = json.loads(data_string)

in your input tag, value = , name = (name is the data that you want to get)
POST sends data as form inputs
GET sends data as URL query parameters

You can send data from client to server in 2 ways
-Sychronously - already defined methods
-Asychronously - using XMLHTTPRequest or Fetch (a modern method of using XMLHTTPRequest)


MVC, or Model-View-Controller, is a design and architectural pattern that breaks up an application into three elements: the model(the data), the view(the graphical interface that users see), and the controller(the code-logic behind the app) It is an industry-standard web development framework used heavily throughout the world.
Ajax allows web pages to be updated fast through asynchronously exchanging small amounts of data back and forth with the server. It allows only a part of a web page to be updated without reloading the entire page.
CRUD Any database should be able to (C)reate, (R)ead, (U)pdate, and (D)elete data.
A session represents all interactions with the database and actually implements a “holding zone” for all the data objects that were affected during this time. They can be finalized (made permanent) by committing the changes, or rolling back if unwanted'
XMLHttpRequest (XHR) objects are used to interact with servers in order to get data from a URL (or page) without having to do an actual full page refresh. Web pages can update just a small part of a page without interrupting what the user is doing. XMLHttpRequest is used heavily in AJAX programming.
Migrations are code-based strategies that allow you to manipulate the schema or data in a database after it has already been created and has data in it. They are useful for recording changes, as well as providing a way to "rollback" changes. There can be several migration files "stacked" on top of one another in order.

To read
https://www.amazon.com/Essential-SQLAlchemy-Mapping-Python-Databases/dp/149191646X
https://www.google.com/books/edition/_/GRvHOwAACAAJ?hl=en

Error Handling in Flask
https://flask.palletsprojects.com/en/1.0.x/errorhandling/
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vii-error-handling

Update in SQLAlchemy
user = User.query.get(some_id)
user.name = 'Some new name'
db.session.commit()

Delete in SQLAlchemy
todo = Todo.query.get(todo_id) 
db.session.delete(todo) # or...
Todo.query.filter_by(id=todo_id).delete()
db.session.commit()

db.relationship
https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/#simple-relationships
https://docs.sqlalchemy.org/en/latest/orm/relationship_api.html#sqlalchemy.orm.relationship

class SomeParent(db.Model):
    id
    name
    children = db.relationship('childClass', backref='some_parent', lazy=True or 'select')

class SomeChild(db.Model):
    id
    name
    some_parent_id = db.Column(db.ForeignKey('some_parent_id))

backref is to customize method e.g. child.some_parent

Lazy loading vs Eager loading
Lazy loading is default. only join when you need it.

Eager loading is calling all future joins initially causing an upfront load time.
(lazy='joined')

collection_class = list, set, dict
cascade = 'save-update' || 'all' || 'delete-orphan'

